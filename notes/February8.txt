HYPERTEXT TRANSFER PROTOCOL (HTTP)
 -Application Layer communications protocol
   *invented by Tim Berners-Lee
   *jointly developed by the W3C (World Wide Web Consortium) and IETF (Internet Engineering Task Force)
   -Version History 
	~HTTP 0.9 (1991) -connection, request, response, disconnection
	~HTTP 1.0 (RFC 1945, May 1996)
	~HTTP 1.1 (RFC 2068, Jan 1997, RFC 2616. Jun 1999),
                    -messaging, syntax and routing
		  (RFC 7230-7235, Jun 2014)
                    _ authentication
	~HTTP 2 (RFC 7540, May 2015)
		--google's SPDY (speedy)

HTTP Fundamentals
  - runs on top of TCP(Transmission Control Protocol)/IP (Internet Protocol), using TCP port 80 by default,
or TCP port 443 for HTTPS (HTTP over SSL(Secure Sockets Layer)/TLS(Transport Layer Security) OR HTTP Secure).
  - HTTP is based on a client-server architecture
	*clients, A.K.A User Agents (UA)
		-Web browsers (most common user agent)
		-web crawlers/spiders (programs that fetch and parse related keywords and get their link/s)
			-e.g. Search engines like Google's Search
		-other end-user tools and applications
 IANA (Internet Assigned Numbers Authority),  ICANN (Internet Corporation for Assigned Names and Numbers)

HTTPS-puts encryption
   	+servers
	  -origin servers
	  -proxy servers, gateways and tunnels

HTTP uses a request-response standard protocol
	  -the client sends a HTTP request message to the server
	  -the server processes the request and replies with a HTTP response message
	e.g. 10.10.22.254 - SLU's proxy server that allows authentication
	     HTTP 2 - push capability feature
	     lower than HTTP 2 version - pull capability "polling" refresh a page in a certain time through a script.

HTTP is a stateless communications protocol
	-servers do not keep information about clients in-between requests

HTTP provides support for other functionalties, such as:
	-cache control
	-content media type Multipurpose Internet Mail Extension (MIME) specification
	-language and character set specification
	-content/transfer codings
	-content negotiation
	-client-server protocol negotiations
	-persistent connections
	-request pipelining - send in sequence
	-authentication/authorization
	-etc.
HTTP Resource Addressing
	-Http resources are identified using URI's (RFS 3986),or more specifically HTTP URI's
		-scheme(http/https)
		-authority
			*user information/authentication credentials(depreciated)
			*host
				-domain name (resolved to an IP address using DNS) of the server where the resource resides(or will be created)
				-port number
			*path to resolve relative to the document root on the server
				-may refer to a static/dynamic resource
			*query
				-typically provided as key=value pairs, with ampersand (&) separators between keyvalue pairs
				-may be URL - encoded
			*fargment identifier
HTTP Request Message
	*Request Line
		-method
		-request URI
		-Http protocol Version
	*Message Headers(general,request,and entity headers)
		-Http 1.1 requires at least the Host request header to be provided
	*Empty Line(CRLF)
	*Message Body a.k.a payload(optional)
	*Status Line
		-Http protocol version
		-status code
		-reason phrase
	*Message Header(general,response, and entity headers)
	*Empty Line
	*Message Body(optional)
HTTP Status Code:
	-Informational(1xx)
	-Success(2xx)
	-Redirection(3xx) 
	-Client error(4xx)
	-Server error(5xx)
Standard Methods
	*Get
		-transfer a current selected representation of the resource identified by the request URI; the retrieved resource is returned in the message.
	*Head
		-same as Get, and it is used to retieve metadata about the entity
	*Post
		-perform resource specific processing of the entities
